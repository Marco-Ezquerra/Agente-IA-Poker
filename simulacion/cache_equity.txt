# Optimización Paso 3: Cacheo de Equity en simulación Monte Carlo

## ¿Qué se implementa?

Se introduce un sistema de caché para evitar recalcular la equity cuando el jugador tiene la misma mano y el board es el mismo.

## ¿Cómo funciona?

1. Se define un diccionario global llamado `_equity_cache`.
2. La clave es una tupla ordenada con las cartas de la mano (`hole_cards`) y del board (`community_cards`).
3. Antes de llamar a `montecarlo_equity`, se consulta este diccionario:
   - Si ya se ha calculado para esa combinación: se devuelve directamente.
   - Si no, se calcula y se guarda en el diccionario para futuras llamadas.

## Beneficios

- Ahorro brutal de tiempo si se repiten escenarios. Hemos pasado de 80s para 500 partidas a 14s
- No afecta la precisión.


## Código clave:

```python
_equity_cache = {}

def get_equity_cached(hole_cards, community_cards, num_players=2, num_simulations=500):
    key = tuple(sorted(hole_cards)) + tuple(sorted(community_cards))
    if key in _equity_cache:
        return _equity_cache[key]
    equity = montecarlo_equity(hole_cards, community_cards, num_players, num_simulations)
    _equity_cache[key] = equity
    return equity
```

Luego se reemplazan todas las llamadas a `montecarlo_equity(...)` por `get_equity_cached(...)`.


